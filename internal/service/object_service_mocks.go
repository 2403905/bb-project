// Code generated by MockGen. DO NOT EDIT.
// Source: bb-project/internal/service (interfaces: ObjectDataPort)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockObjectDataPort is a mock of ObjectDataPort interface.
type MockObjectDataPort struct {
	ctrl     *gomock.Controller
	recorder *MockObjectDataPortMockRecorder
}

// MockObjectDataPortMockRecorder is the mock recorder for MockObjectDataPort.
type MockObjectDataPortMockRecorder struct {
	mock *MockObjectDataPort
}

// NewMockObjectDataPort creates a new mock instance.
func NewMockObjectDataPort(ctrl *gomock.Controller) *MockObjectDataPort {
	mock := &MockObjectDataPort{ctrl: ctrl}
	mock.recorder = &MockObjectDataPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectDataPort) EXPECT() *MockObjectDataPortMockRecorder {
	return m.recorder
}

// SaveObjects mocks base method.
func (m *MockObjectDataPort) SaveObjects(arg0 context.Context, arg1 []Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveObjects", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveObjects indicates an expected call of SaveObjects.
func (mr *MockObjectDataPortMockRecorder) SaveObjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveObjects", reflect.TypeOf((*MockObjectDataPort)(nil).SaveObjects), arg0, arg1)
}
